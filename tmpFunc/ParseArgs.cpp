#include "stdafx.h"


bool EncodeText(char* src, char* out, const char* encBuf, size_t encSize);
void ShowBytes(char* szBuf, size_t bufSize, const char* title=NULL);
bool SendText(const char* userName, const char* passwd);


bool SendText(const char* userName, const char* passwd)
{
	char enc[64] = "";
	char combine[64];

	char encBuf[64] = {
		0x15, 0x3A, 0x30, 0x4C, 0x48, 0x5D, 0x4C, 0x47,
		0x7B, 0x61, 0x12, 0x63, 0x71, 0x26, 0x58, 0x7D,
		0x4E, 0x42, 0x4E, 0x70, 0x41, 0x3B, 0x13, 0x16,
		0x22, 0x6B, 0x3B, 0x6C, 0x08, 0x7F, 0x62, 0x0D,
		0x1F, 0x5D, 0x41, 0x32, 0x6B, 0x08, 0x2A, 0x2B,
		0x27, 0x5B, 0x4B, 0x57, 0x1C, 0x3C, 0x4F, 0x73,
		0x61, 0x2B, 0x1B, 0x5D, 0x3B, 0x73, 0x13, 0x1D,
		0x5F, 0x14, 0x40, 0x37, 0x3E, 0x38, 0x79, 0x1D, };


	memset(combine, 0, 64);
	memset(enc, 0, 64);

	memcpy(combine, userName, 32);
	memcpy(combine + 32, passwd, 32);

	EncodeText(combine, enc, encBuf, 64);
	ShowBytes(enc, 64, "After Encrept");
	return true;
}

void testSendText()
{
	char userName[32] = "albertofwb";
	char passwd[32] = "123456789";
	SendText(userName, passwd);

}

bool testFunc()
{
	char userName[32] = "albertofwb";
	char passwd[32] = "123456789";

	char out[64] = "";
	char dec[64] = "";
	char encBuf[64] = {
		0x15, 0x3A, 0x30, 0x4C, 0x48, 0x5D, 0x4C, 0x47,
		0x7B, 0x61, 0x12, 0x63, 0x71, 0x26, 0x58, 0x7D,
		0x4E, 0x42, 0x4E, 0x70, 0x41, 0x3B, 0x13, 0x16,
		0x22, 0x6B, 0x3B, 0x6C, 0x08, 0x7F, 0x62, 0x0D,
		0x1F, 0x5D, 0x41, 0x32, 0x6B, 0x08, 0x2A, 0x2B,
		0x27, 0x5B, 0x4B, 0x57, 0x1C, 0x3C, 0x4F, 0x73,
		0x61, 0x2B, 0x1B, 0x5D, 0x3B, 0x73, 0x13, 0x1D,
		0x5F, 0x14, 0x40, 0x37, 0x3E, 0x38, 0x79, 0x1D, };

	char tmp[64];

	memset(tmp, 0, 64);
	memset(out, 0, 64);

	memcpy(tmp, userName, 32);
	memcpy(tmp + 32, passwd, 32);

	EncodeText(tmp, out, encBuf, 64);
	EncodeText(out, dec, encBuf, 64);

	if (!memcmp(dec, tmp, 64))
	{
		printf("Decrept Ok\n");
	}
	else
	{
		printf("Decrept Ok\n");
	}
	return true;
}

void ShowBytes(char* szBuf, size_t bufSize, const char* title)
{
	if (NULL != title)
	{
		printf("[%s] START\n", title);
	}
	for (size_t i = 0; i < bufSize; i++)
	{
		if (i > 0 && i % 16 == 0)
		{
			putchar('\n');
		}
		printf("0x%02X ", szBuf[i]);
	}
	putchar('\n');
	if (NULL != title)
	{
		printf("[%s] END\n\n", title);
	}
}

bool EncodeText(char* src, char* out, const char* encBuf, size_t encSize)
{
	if (NULL == src || NULL == out || NULL == encBuf)
	{
		return false;
	}

	for (size_t i = 0; i < encSize; i++)
	{
		out[i] = src[i] ^ encBuf[i];
	}

	return true;
}